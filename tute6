
1. What is the difference between a symmetric-key cryptography system and a public-key system?

Symmetric: uses same key in both envryption & decryption
Assymetric: different keys are used

2. Suppose N people want to communicate with each of N − 1 other people using symmetric
key encryption. All communication between any two people, i and j, is visible to all other
people in this group of N, and no other person in this group should be able to decode their
communication. How many keys are required in the system as a whole? Now suppose that
public key encryption is used. How many keys are required in this case?

Fully connected graph: every 2 nodes has an edge in between
# of edges = # of keys -> N * (N-1) / 2

N people want to communicate with N-1 other people but since we want to remove repetitions, divide by 2

3. Is AES an asymmetric or symmetric cryptography algorithm? What does that mean? Why
is AES less suitable for digital signatures than RSA?

AES: Symmetric 
Using the same key for both encryption and decryption
Anyone who has that key can change the signature (only authorised people should be able to replicate signatures in digital signatures)

4. Why is asymmetric key cryptography not often used to encrypt actual messages? Describe
how asymmetric key cryptography is commonly used in combination with symmetric key
cryptography to encrypt messages.

Assymmetric is slower than Symmetric in data transmission
Use asymmetric cypto to share the symmetric KEY required in data transmission afterwords


5. What is a digital certificate?

Describe a third party entity proves the ownership of a PUB key


6. Suppose certifier.com creates a certificate for foo.com. Typically, the entire certificate would
be encrypted with certifier.com’s public key. True or False?

False

cerifier.com would include a digital signature, which is a hash of foo.com's info (including its public key), and signed with
certifier.com's key

7. The Diffie-Hellman key exchange is being used to establish a secret key between Alice and
Bob. Alice sends Bob (p = 227, g = 5, TA = gx = 82). Bob responds with (125). 
Alice’s secret number, x, is 12, and Bob’s secret number, y, is 3. Show how Alice and Bob compute
the secret key.

Alice: g^a mod p -> 5^12 mode 227 = 82 then
Bob: 5^3 mod 227 = 125 -> response
Alice: On receiving: 125 -> secret = 125^12 mod 227 = 212
or Bob: On receiving: 82 -> 82 ^ 3 mod 227 = 212

8. RSA asymmetric cryptography uses powers of large numbers modulo a third number, like
Diffie-Hellman key exchange. It relies on the fact that there are triples of numbers (d, e, n)
such that for any integer m, (me) d ≡ m(mod n). The public key consists of e and n, and the
private key consists of d and n. Encryption consists of calculating me
(mod n). Decrypting ciphertext c consists of calculating c d (mod n).

Explain in one or two lines why this will always decrypt to the correct plaintext.
Encrypt the message 6 with the key (e = 3, n = 55). Decrypt the ciphertext with the key
(d = 7, n = 55).
Sender: m -> m^e = c
Receiver: c^d = (m^e)^d
Since: m (mod n) = (m^e)^d (mod n) -> correct plaintext


9. Alice wants to communicate with Bob, using public-key cryptography. She establishes a
connection to someone she hopes is Bob. She asks him for his public key and he sends it to
her in plaintext along with an X.509 certificate signed by the root CA. Alice already has the
public key of the root CA. What steps does Alice carry out to verify that she is talking to
Bob? Assume that Bob does not care who he is talking to (e.g., Bob is some kind of public
service).
This will require more detail than was given in the lectures. A long answer is given at
question 2 of https://security.stackexchange.com/questions/139176/details-of-tls-certificateverification

if X.509 valid? Decoding with CA's PUB key
   If valid, Alice would get Bob's PUB key
If the other end was potentially "Bob" (or fake)?
   Alice sends a Msg m to Bob encoded by Bob pub key for testing
   if Bob could send plain text m back to Alice -> Bob has PRIV key -> Bob is Bob

10. Suppose that a system uses PKI based on a tree-structured hierarchy of CAs. Alice wants
to communicate with Bob, and receives a certificate from Bob signed by a CA X after
establishing a communication channel with Bob. Suppose Alice has never heard of X. What
steps does Alice take to verify that she is talking to Bob?
See https://www.ibm.com/support/knowledgecenter/en/SSLTBW 2.1.0/
com.ibm.zos.v2r1.icha700/icha700 Certificate hierarchies.htm

PKI - Public Key Infrastructure
Chained Verification of CA X
   Alice asking X for its PUB key -> if X replied with another certificate signed by Y,
   Alice would need to verify Y, until reaching root CAs or CA that Alice trusted
   
   if valid, then Alice communicates with Bob through the channel

11. (Brainstorming question; there are no right or wrong answers). In what ways could a salt be
combined with a plaintext before encryption? What are the pros and cons of each method?

how a salt can be added to a plain text
Possible arithmetic operations:
   XOR
   Attached with plain text
   In head of text

12. Describe the TLS Handshake process.

Client   TCP Connection established      Server
Hello    Hello: applicale cither Suites   ->

server verified<-       Hello: certain cipher suites server certificate, requesting on client certificate

Client certificate ->
Key ->
<- key 

---------------- Notes ------------------------
Secure Connection:
Only those who are in the network communications are involved
Privacy, Integrity (data is not tampered), Authentication 

TLS: Transport Layer Security
Encryption, Decryption, key

Privacy: hidden between two end points, others can detect but cannot understand

Integrity: No change in the sent data

Authentication: Are the selected end point users engage in the communication 

TCP applicable

Protocol: HTTPS -- HTTP + Secure
   using port 443 distinguishable from HTTP: 80
   
SSL: Secure socket layer -> confidence, encryptions
TLS - Handshake Process

Secure Roles Distribution with OSI Network Model

#7 Application Layer – HTTP functionalities

#6 Presentation Layer – Encryption + Data Formatting

#5 Session Layer – Authentication (+ Restoration of Interrupted Sessions)

Client   TCP Connection established      Server
Hello    Hello: applicale cither Suites   ->

server verified<-       Hello: certain cipher suites server certificate, requesting on client certificate

Client certificate ->
Key ->
<- key 

Crypto:
2 phases
Encryption: Data sent -> cipher text to network
Decryption: cipher text from network -> data received
*Integrity: ensure data sent == data received

Limitations:
No perfect crypto: can be broken with brutal-force
  every one of them can be broken with unlimited computing power and time
  
Types:
Symmetric vs Asymmetric 
Differences?
Symmetric: uses same key in both envryption & decryption
Assymetric: different keys are used

Electronic Codebook
Sneder: 
Chunking plain text into blocks
Encrypting with key assigned -> generating ciphertext for each of the blocks

Receiver:
Get cyphertextblocks
Decrypting each of the blocks with the same key -. getting plaintext -> merging together

Easy to design & control

parallelised.

Not applicable? Why?
No diffusion on ciphertext blocks produced
  same plaintext blocks producing the same ciphertet blocks
  Pattern matching in other granularities.
  
repetition in patterns

Crypto - CBC:
Cipher Block Chaining
Initialisation vectors (salt)

Key to encrypt use key to encrypt again and so on.

Key Exchange:
Diffie Hellman Key Exchange
  Each Entity generates part of elms in key
  one exchanges partial key publicly to the other
  On receiving partial KEY, each entity adds its partial key with the received one
  Finally: each entity has the same KEY for encryption
  
 Features:
  Sound KEY never exposed to public - generated same KEY on both sides

Encrypt with PUB key
Decrypt with PRIVATE key

Private key is only owned by the owner.

WHy asymmetric?
  Non eed to perform Key exchange between entities
    Sender don't need to touch priv key
    
    Limitations
      slower than ssymmetrcic encryption: more complicated
      
Used in symmetric key sharing process.

Public key signatures:
Announcement on validity of a priv key holder
priv key holder:
  Encrypting a message M with its priv key -> signature

Verification:
  anyone else with PUB KEY decrypts signature received -> M.recv if M.recv equal to M -> verified
  
Salt:
Add randomness to hashing process:
SHA-256
Using SHA-256

Certificates:
Third-party authority to PUB KEY ownership
  This PUB KEY belongs to Alice - signed by some Authority
  
  The Issuer: Certificate Authority (CA)
  Chain of Authority may be necessary
    If CA1 is an authorised CA? Let CA2 tell
    If CA" ...
    
    
 Things to bear in mid:
 Key sizes - determines the degree of security
  Longer key -> harder to be computed by brute force, but inefficient for encoding/decoding
  
  Randomess:
  Create Unccertainty to hackers
  should never be reused
  
  

      
      
