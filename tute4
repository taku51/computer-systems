
1. Consider a TCP connection between Host A and Host B. Suppose that the
TCP segments traveling from Host A to Host B have source port number
x and destination port number y. What are the source and destination
port numbers for the segments traveling from Host B to Host A?


2. Suppose that a Web server runs in Host C on port 80. Suppose this Web
server uses persistent connections, and is currently receiving requests from
two different Hosts, A and B. Are all of the requests being sent through
the same socket at Host C? If they are being passed through different
sockets, do both of the sockets have port 80? Discuss and explain.



3. Consider a reliable data transfer protocol that uses only negative acknowledgments. Suppose the sender sends data only infrequently. Would a
NAK-only protocol be preferable to a protocol that uses ACKs? Why?
Now suppose the sender has a lot of data to send and the end-to-end connection experiences few losses. In this second case, would a NAK-only
protocol be preferable to a protocol that uses ACKs? Why?



4. Draw the FSM (finite state machine) for the receiver side of protocol rdt
3.0.



5. Suppose Host A sends two TCP segments back to back to Host B over a
TCP connection. The first segment has sequence number 900; the second
has sequence number 1024.
(a) How much data is in the first segment?

*Send back to back
sq number + data = acknowledge number/next sequence number.
If the packet is lost, then the acknowledge number/next seq number will be the previous sequence number but not data.
data = 1024 - 900 (We know the second seq number already so if the packet arrived fine thne it becomes 1024) = 124 bytes


(b) Suppose the first segment is lost but the second segment arrives at
B. In the acknowledgement that Host B sends to Host A, what will
be the acknowledgement number?

(data is lost so don't add up to the previous sequence number)
ack = 900

(c) Suppose that now the third segment with sequence number of 1124
from Host A arrives to Host B, and the second segment is still missing.
What will be the acknowledgement number?

Because the first segment is lost, and the second segment is also missing, it still has the same ACK number as the first segment.
ack = 900


6. Host A and B are communicating over a TCP connection, and Host B
has already received from A all bytes up through byte 126. Suppose
Host A then sends two segments to Host B back-to-back. The first and
second segments contain 80 and 40 bytes of data, respectively. In the
first segment, the sequence number is 127, the source port number is 302,
and the destination port number is 80. Host B sends an acknowledgment
whenever it receives a segment from Host A.

(a) In the second segment sent from Host A to B, what are the sequence
number, source port number, and destination port number?

*TCP, so there's a timer and if it receives another segment when there's already one being processed,
*The receiver will send previous ACK to ask for retransmission. 
seq = 207 (126 + 80 + 1 because in the second segment
it assumes the first one is already sent, and the next one so + 1), port num = 302, dst = 80
Port num and dst always stay the same.

(b) If the first segment arrives before the second segment, in the acknowledgment of the first arriving segment, what is the acknowledgment
number, the source port number, and the destination port number?

ack = 207 because if it arrives fine then it's 126 + 80 + 1, same as (a)
Port num and dst always stay the same.

(c) If the second segment arrives before the first segment, in the acknowledgment of the first arriving segment, what is the acknowledgment
number?

Arrives in the acknowledgement of the frist arriving segment, so while the first one is still being processed.
ack = 127
-> because the received packet at this point is 126, so the next acknowledge number will be 127

(d) Suppose the two segments sent by A arrive in order at B. The first
acknowledgment is lost and the second acknowledgment arrives after
the first timeout interval. Draw a timing diagram, showing these
segments and all other segments and acknowledgments sent. (Assume there is no additional packet loss.) For each segment in your
figure, provide the sequence number and the number of bytes of data;
for each acknowledgment that you add, provide the acknowledgment
number.

*Send two segments at the same time so it times out
1, Host A Seq = 127, 80 bytes -> Host B

1 arrives and Host B sends
2, Host A <- ack = 207 Host B

Host A sends the other segment 
3, Host A Seq = 207, 40 bytes -> Host B

3 Arrives and Host B sends before the 4 arrives so timeout and request a retransmission
4, Host A <- ACK = 247 Host B

Host A retransmit 1
5, and ACK = 247 arrives, so the next ACK will be 247









