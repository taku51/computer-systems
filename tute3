1. Suppose a process in Host C has a UDP socket with port number 6789.
Suppose both Host A and Host B each send a UDP segment to Host C with
destination port number 6789. Will both of these segments be directed to
the same socket at Host C? If so, how will the process at Host C know
that these two segments originated from two different hosts?

It all depends on the socket (port number, ip-address), as long as one of those is differnt.
Diff browsers -> diff port numbers
Diff hosts -> diff IP addresses.

Yes, both segments will be directed to the same socket. For each of those
segments, at the socket interface, the OS will provide the
process with the IP addresses to determine the origins of the individual
segments.

*Different browsers have different port numbers.

2. UDP and TCP use 1s complement for their checksums. Suppose you have
the following three 8-bit bytes: 11010011, 11100110, 11110100.

(a) What is the 1s complement of the sum of these 8-bit bytes? (Note
that although UDP and TCP use 16-bit words in computing the
checksum, for this problem you are being asked to consider 8-bit
sums.) Show all work.

Wrap around if overflow.

11010011
11100110 *
--------------------------
10111010
11110100 +
--------------------------
10101111 complement
--------------------------
01010000 (complement)

(b) Why is it that UDP takes the 1s complement of the sum; that is,
why not just use the sum?

To detect errors, the receiver adds the four words (the three original words and the checksum)
The receiver side might be using a different representation (6's endian vs little endian).
One of which reads from the left hand side, as opposed to the other starting from the right hand side.
Depending on the OS

(c) With the 1s complement scheme, how does the receiver detect errors?

If the sum contains a zero, the receiver knows there has been an error.
The sum should only have 1s.

(d) Is it possible that a 1-bit error will go undetected?

All one-bit errors will be detected.

(e) How about a 2-bit error?

Two-bit errors can be undetected (if the last digit of the first word is converted to
a 0 and the last digit of the second word is converted to a 1), because it only checks the sum.

3. Indicate whether TCP or UDP (or both or neither) provide the following
services to applications:
-> TCP vs UDP

(a) Reliable data transfer between processes

TCP provides a reliable byte-stream between client and server.

(b) Minimum data transmission rate between processes

Neither.  It cannot ensure the speed.
depends on the speed of the network.

(c) Congestion-controlled data transfer between processes

TCP as it segments messages into smaller bytes.

(d) A guarantee that data will be delivered within a specified amount of
time

Neither -> cannot ensure depends on the network speed.

(e) Preserve application-level message boundaries. That is, when a sender
sends a group of bytes into a socket via a single send operation, that
group of bytes will be delivered as a group in a single receive operation at the receiving application

UDP preserves message boundaries, 
while TCP is byte-stream oriented, and does not preserve message boundaries.

Message boundaries:
With UDP -> uses two calls. Send() and Recv()
With TCP -> segments messages into smaller bytes and control the transmission.

(f) Guaranteed in-order delivery of data to the receiver

TCP will deliver bytes to the receiver in the order in which they were sent, because 
it's reliable (three things are guaranteed).
UDP does not guarantee delivery of message data in the order in which they were sent.


4. Why does UDP exist? Would it not have been enough to just let the user
processes send raw IP packets?

IP: host to host -> doesn't consider port numbers
UDP/TCP: process to process.

UDP exists to allow you to send IP-encapsulated data without the connection overhead of TCP.
The advantage of UDP over simply sending raw IP packets is that UDP gives the capability to multiplex/
demultiplex on different source/destionation ports.

IP packets have no end-to-end error detection mechanism.  IPv4 has a checksum that covers only its header,
so the data is protected only by the layer 2 error detection -> not end to end.

Both UDP and TCP use a end-toend checksum.

5. Both UDP and TCP use port numbers to identify the destination entity
when delivering a message. Give two reasons for why these protocols
invented a new abstract ID (port numbers), instead of using process IDs,
which already existed when these protocols were designed?

Process IDs are given by the OS.  Port numbers 

When communicating with different servers, it also needs port numbers to use different end points.

・In some situations, one process manages multiple sockets (channels of communications) on different TSAPs. If process ID is used, 
it cannot be implemented since one process can have only one process ID.

・Process ID is not static. Since process ID is assigned dynamically to the process when a process is created, it cannot be used 
for well-known service such as HTTP. 

6. What are the guarantees that a reliable data transfer must provide?

no packet loss
integrity
order of delivery

With TCP, can lose packets.  But as long as they can detect the loss, it's reliable.

7. What is the fatal flaw of rdt2.0? Please give an example to explain why
it would be a problem.

rdt2.0 uses ACK and NAK to let the receiver or sender know the packet is delivered securely.
But there's a chance that even ACK and NAK can be corrupted.  In these cases, cannot detect 
the packet errors.


8. Please draw the FSM (Finite State Machine) of both the sending and
receiving sides of rdt2.0 by your own (without looking at the slides).

(state1) - (Transition) > (state 2) ->

Sending side:
(wait for call from above) <(make_packet(packet,data), udt_send(packet)) 
- (rdt_send(data))> (wait for call from above)

Receiving side:
(wait for call from below) <extract(packet,data), deliver_data(data)
- (rdt_rcv(packet))> (wait for call from below)

*Notes
Two different types of orders the CPU processes:
6s-endian
from the most significant bit (right to left)

Little-endian
from the least significant bit (left to right)

Since there are these two different types, the system uses the complement rather than the sum.
So that it won't be representation dependent.
