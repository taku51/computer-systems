
A nuts and bolts description:

The Internet is a computer network that interconnects computing devices.

End Systems:

Mobile phones, Computers... -> routers -> modems -> Internet Service Providers (Telstra, TPG, Optus)

Modems uses degital subscriber line (ADSL), cable (Television Company), fiber (fastest), dial-up, satellite

Packet switches (routers, link-layer switches)

Packets = info sent through the communication links.

Control the sending and receiving of packets by running protocols (rules)

-----------------------------------------------------------------------------------

LAN = local area network -> managed by users (can make its own protocols, connect raptops with cables)
WAN = wide area network -> generally managed by companies (connecting between tokyo office and london office)

Protocols:
1, the format of messages
2, orders of the messages to be communicated
3, actions taken on the tramsmission of a message

Request -> reply -> Request -> reply

All activity in the Internet that involves two or more communicating remote entities is governed by a protocol.

Internet protocols are TCP/IP

Intranet = internal networks within companies

Advantage of using protocols -> structural abstraction of the entire process (decoupling by implementing layers)

Disadvantage -> could be delay between layers, errors, overheads

-----------------------------------------------------------------------------------

Open Systems Interconnection -> is not used these days but good to learn
OSI (7 layers):
Application -> users provide network services (make emails written by users network processable by lower layers)

Presentation -> format information into the same form so that every device on the network can see the same messsages.

Session -> manages connections between applications (mail application <-> mail server) -> checkpointing, recovery

Transport -> controls flow, order (split data to send), response check, re-send, window (size of data to be sent) -> to make sure data are sent properly

Network -> rooting (find the path), send data to the selected path (IP Address -> tells wherein the network the computer is located, uni cast add -> 1 to 1, broadcast add -> 1 to many
one to many, multicast add -> one to a large number), data structures, identify the initial address & final address  -> enables communications between different networks

(Global IP for the Internet, Private IP for private network)

DataLink -> when to send data, detect errors and fix them, data structures, identify the initial address & final address  -> enables communications between different networks
-> enable communications between closely connected (in the same local network area) network devices using MAC address (Organizationally unique identifier)
-> can find which maker made the device with the OUI code.

Physical -> convert bit numbers into signals, and vice versa (connector shapes, pin allocations, cable types, voltage level,
voltage alternator, transmission speed, encoding scheme)

-----------------------------------------------------------------------------------

Each layer uses the "header" to identify which data belong to them.
Adding the "header" to the data sent from the previous layer is called encapsulating, and taking the header off at the current
layer is called decapsulating.

Protocol Data Unit

As the header is added when moving to the lower layer, data are called differently in each layer.

Datalink -> frame
Network -> Packet
Transport -> Segment

-----------------------------------------------------------------------------------



TCP/IP Model (5 layers):

Application -> http (web surfing, client & server program), pop, smtp (email), ftp (file transfer bet' end systems), telnet (remote control servers in distance)
, ssh
-> Help exchange packets of information with the application in another end system. Packets are called messages in this layer.
-> Format of messages.  When and how a process sends messages and responds to them.

Transport -> TCP (connection oriented service, reliable) -> phone call, UDP (conncetionless service, unrealiable -> not sure where they'll be delivered) -> post office
-> Transports application layer messages between application endpoints, SSH (same as telnet but no encription)

Network -> IP (The fields in the packet, and how the end systems and routers act on these fields) ->all internet components that have this layer must run this protocol. 
, ICMP, ARP -> (Responsible for moving network layer packet from one end system to another) 

Link -> wifi protocol, ethernet protocol -> delivers the packets called frames to the next node along the route
Move entire frames from one network element to the next element in the route. -> move data between devices on the same network.
using MAC address to identify the devices.  

Physical -> move the indiviaul bbits within the frames from the network element to the next
-> protocols are link dependent and further depend on the actual trasmission medium of the link.
Ex, Twist-pair opper wire, single mode fiber optics

From application to transport, add TCP to encapsulate
From transport to internet, add IP to encapsulate
From Internet to network, add Ethernet to encapsulate


-----------------------------------------------------------------------------------

TCP & OSI Comparison

Application = Application, Presentation, Session
Transport = Transport
Internet = Network
Network Interface = Data Link, Physical

Presentation layer and Session layer are not important in TCP/IP model

If an application needs these two, developers can implement on their own.

Top down approach so start from application and end with Physical

Socket is an interface between the application and transport, sometimes referred as an API.

-----------------------------------------------------------------------------------

HTTP

HTTP uses TCP as its transport protocol.
Client first initiates a TCP onnection with the server.
Once it's established, the browser and the server processes access TCP through their socket interfaces.

Non-Persistent conncetions:
Each request/response pair is sent over a separate TCP connection.

Persistent connections:
Requests and responses are sent over the same TCP connection

80 is the default port for HTTP.

Request and response are written in ASCII text.

GET/somedir/page.html HTTP/1.1

GET is the requist line (GET -> request an object in the specified URL, POST -> used when the user fills out a form
, HEAD -> detect whether an object can be requested successfully, PUT -> allows to upload an obj to a specific path on a specific server
DELETE -> allows a user to delete an obj on a server)

HTTP is a stateless protocol -> Maintains no info about the clients
To identify users, uses Cookies.

Cookie header in the HTTP response and request
Cookie file on the user's end system and managed by the browser
A backend database at the website.

-----------------------------------------------------------------------------------

Non Persistent
All done through the socket
Step 1: Client initiates a TCP connection to the server on port 80
Step 1.2: Server process accepts to connection request and sends a response message

Step 2: Client sends an HTTP request to the server

Step 3: Server receives the request, retrieves the object at the path name, encapsulates the object 
in an HTTP response, and sends it to the client.

Step 4: Server tells TCP to close the TCP connection
   -doesn't terminate the connection until it knows for sure that the client has received the response intact.
   
Step 5: Client receives the response, TCP terminates, message indicates that the encapsulated object is an HTML file.
Client:
      extracts the HTML file, examines the HTML, and finds references to the image objects.
      
For each object, it requires two round trip time.

For each TCP connection, it causes some OS overhead because TCP buffers must be allocated and TCP bariables
must be kept in both the client and server.

Browsers often open parallel TCP connections to fetch referenced objects.

-----------------------------------------------------------------------------------

Persistent (the defo for HTTP):
Server leaves connection open after sending response. The connection closes if it's not used for a certain
time.

Subsequest HTTP messages between the same client/server are sent over the open connection.
Like a phone call.

No need to wait for the replies to pending requests (pipelining)

-----------------------------------------------------------------------------------


TTL = time to live 
1 bit per router.  If 8 bit, then 255 routers.

-----------------------------------------------------------------------------------

Network Topology:

Bus: all nodes (computers) connected via one cable
Star: nodes connected via a router -> Ethernet
Ring: Nodes connected with their neighbours
Mesh: mainly used for the connections of network devices.  The devices within the network are connected diagonally, vertically, and horizontally.

Data that can be fit into one frame is 1500 bytes at maximum.

-----------------------------------------------------------------------------------

Repeaters and hubs work as the intermediary between nodes, alternating bits & signals

Repeater -> can only connect two cables (sending signals from one node to another)
Repeater Hub -> Multiple cables can be connected, however, it's structually inefficient in the way that data are 
sent to all connected devices, regardless of the needs.

The Collisions of electric signals slow down the network speed.

-----------------------------------------------------------------------------------

Bridge -> identify MAC address from frames and transfer data to the hosts

Layer 2 Switch -> same as bridge but it can be connected to multiple hosts.

It also finds to which port to send the frames.

Routers -> find optimal paths to transfer packets, gateways, connect different protocols.

Layer 3 Switch -> has the functionalities of both a layer 2 switch and router.  But it cannot convert protocols unlike routers.

-----------------------------------------------------------------------------------

