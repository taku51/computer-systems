
A nuts and bolts description:

The Internet is a computer network that interconnects computing devices.

End Systems:

Mobile phones, Computers... -> routers -> modems -> Internet Service Providers (Telstra, TPG, Optus)

Modems uses degital subscriber line (ADSL), cable (Television Company), fiber (fastest), dial-up, satellite

Packet switches (routers, link-layer switches)

Packets = info sent through the communication links.

Control the sending and receiving of packets by running protocols (rules)

-----------------------------------------------------------------------------------

LAN = local area network -> managed by users (can make its own protocols, connect raptops with cables)
WAN = wide area network -> generally managed by companies (connecting between tokyo office and london office)

Protocols:
1, the format of messages
2, orders of the messages to be communicated
3, actions taken on the tramsmission of a message

Request -> reply -> Request -> reply

All activity in the Internet that involves two or more communicating remote entities is governed by a protocol.

Internet protocols are TCP/IP

Intranet = internal networks within companies

Advantage of using protocols -> structural abstraction of the entire process (decoupling by implementing layers)

Disadvantage -> could be delay between layers, errors, overheads

-----------------------------------------------------------------------------------

Open Systems Interconnection -> is not used these days but good to learn
OSI (7 layers):
Application -> users provide network services (make emails written by users network processable by lower layers)

Presentation -> format information into the same form so that every device on the network can see the same messsages.

Session -> manages connections between applications (mail application <-> mail server) -> checkpointing, recovery

Transport -> controls flow, order (split data to send), response check, re-send, window (size of data to be sent) -> to make sure data are sent properly

Network -> rooting (find the path), send data to the selected path (IP Address -> tells wherein the network the computer is located, uni cast add -> 1 to 1, broadcast add -> 1 to many
one to many, multicast add -> one to a large number), data structures, identify the initial address & final address  -> enables communications between different networks

(Global IP for the Internet, Private IP for private network)

DataLink -> when to send data, detect errors and fix them, data structures, identify the initial address & final address  -> enables communications between different networks
-> enable communications between closely connected (in the same local network area) network devices using MAC address (Organizationally unique identifier)
-> can find which maker made the device with the OUI code.

Physical -> convert bit numbers into signals, and vice versa (connector shapes, pin allocations, cable types, voltage level,
voltage alternator, transmission speed, encoding scheme)

-----------------------------------------------------------------------------------

Each layer uses the "header" to identify which data belong to them.
Adding the "header" to the data sent from the previous layer is called encapsulating, and taking the header off at the current
layer is called decapsulating.

Protocol Data Unit

As the header is added when moving to the lower layer, data are called differently in each layer.

Datalink -> frame
Network -> Packet
Transport -> Segment

-----------------------------------------------------------------------------------



TCP/IP Model (5 layers):

Application -> http (web surfing, client & server program), pop, smtp (email), ftp (file transfer bet' end systems), telnet (remote control servers in distance)
, ssh
-> Help exchange packets of information with the application in another end system. Packets are called messages in this layer.
-> Format of messages.  When and how a process sends messages and responds to them.

Transport -> TCP (connection oriented service, reliable) -> phone call, UDP (conncetionless service, unrealiable -> not sure where they'll be delivered) -> post office
-> Transports application layer messages between application endpoints, SSH (same as telnet but no encription)

Network -> IP (The fields in the packet, and how the end systems and routers act on these fields) ->all internet components that have this layer must run this protocol. 
, ICMP, ARP -> (Responsible for moving network layer packet from one end system to another) 

Link -> wifi protocol, ethernet protocol -> delivers the packets called frames to the next node along the route
Move entire frames from one network element to the next element in the route. -> move data between devices on the same network.
using MAC address to identify the devices.  

Physical -> move the indiviaul bbits within the frames from the network element to the next
-> protocols are link dependent and further depend on the actual trasmission medium of the link.
Ex, Twist-pair opper wire, single mode fiber optics

From application to transport, add TCP to encapsulate
From transport to internet, add IP to encapsulate
From Internet to network, add Ethernet to encapsulate


-----------------------------------------------------------------------------------

TCP & OSI Comparison

Application = Application, Presentation, Session
Transport = Transport
Internet = Network
Network Interface = Data Link, Physical

Presentation layer and Session layer are not important in TCP/IP model

If an application needs these two, developers can implement on their own.

Top down approach so start from application and end with Physical

Socket is an interface between the application and transport, sometimes referred as an API.

-----------------------------------------------------------------------------------

HTTP

HTTP uses TCP as its transport protocol.
Client first initiates a TCP onnection with the server.
Once it's established, the browser and the server processes access TCP through their socket interfaces.

Non-Persistent conncetions:
Each request/response pair is sent over a separate TCP connection.

Persistent connections:
Requests and responses are sent over the same TCP connection

80 is the default port for HTTP.

Request and response are written in ASCII text.

GET/somedir/page.html HTTP/1.1

GET is the requist line (GET -> request an object in the specified URL, POST -> used when the user fills out a form
, HEAD -> detect whether an object can be requested successfully, PUT -> allows to upload an obj to a specific path on a specific server
DELETE -> allows a user to delete an obj on a server)

HTTP is a stateless protocol -> Maintains no info about the clients
To identify users, uses Cookies.

Cookie header in the HTTP response and request
Cookie file on the user's end system and managed by the browser
A backend database at the website.

-----------------------------------------------------------------------------------

Non Persistent
All done through the socket
Step 1: Client initiates a TCP connection to the server on port 80
Step 1.2: Server process accepts to connection request and sends a response message

Step 2: Client sends an HTTP request to the server

Step 3: Server receives the request, retrieves the object at the path name, encapsulates the object 
in an HTTP response, and sends it to the client.

Step 4: Server tells TCP to close the TCP connection
   -doesn't terminate the connection until it knows for sure that the client has received the response intact.
   
Step 5: Client receives the response, TCP terminates, message indicates that the encapsulated object is an HTML file.
Client:
      extracts the HTML file, examines the HTML, and finds references to the image objects.
      
For each object, it requires two round trip time.

For each TCP connection, it causes some OS overhead because TCP buffers must be allocated and TCP bariables
must be kept in both the client and server.

Browsers often open parallel TCP connections to fetch referenced objects.

-----------------------------------------------------------------------------------

Persistent (the defo for HTTP):
Server leaves connection open after sending response. The connection closes if it's not used for a certain
time.

Subsequest HTTP messages between the same client/server are sent over the open connection.
Like a phone call.

No need to wait for the replies to pending requests (pipelining)

-----------------------------------------------------------------------------------


TTL = time to live 
1 bit per router.  If 8 bit, then 255 routers.

-----------------------------------------------------------------------------------

Network Topology:

Bus: all nodes (computers) connected via one cable
Star: nodes connected via a router -> Ethernet
Ring: Nodes connected with their neighbours
Mesh: mainly used for the connections of network devices.  The devices within the network are connected diagonally, vertically, and horizontally.

Data that can be fit into one frame is 1500 bytes at maximum.

-----------------------------------------------------------------------------------

Repeaters and hubs work as the intermediary between nodes, alternating bits & signals

Repeater -> can only connect two cables (sending signals from one node to another)
Repeater Hub -> Multiple cables can be connected, however, it's structually inefficient in the way that data are 
sent to all connected devices, regardless of the needs.

The Collisions of electric signals slow down the network speed.

-----------------------------------------------------------------------------------

Bridge -> identify MAC address from frames and transfer data to the hosts

Layer 2 Switch -> same as bridge but it can be connected to multiple hosts.

It also finds to which port to send the frames.

Routers -> find optimal paths to transfer packets, gateways, connect different protocols.

Layer 3 Switch -> has the functionalities of both a layer 2 switch and router.  But it cannot convert protocols unlike routers.

-----------------------------------------------------------------------------------

Week 2

TCP/IP Model

Application <- end to end (not aware of other layers (e.g cables)) -> Application
Transport <- end to end (http request so no need to know the functionality of other layers) -> Transport
Network <- end to end (Only consideres initial and final IP addresses) & Point to Point (but rooting is point to point because need to look at multiple nodes) ->  Network
Link <- point to point (dependent, e.g. depends on whether it's ethernet or wifi) -> Link
Physical <- point to point (depends on the transmission medium as well) -> Physical

Persistent:
Sequential = Request -> Response -> Request -> Response

Pipelined (Default in HTTP) = doesn't need to wait for the request

-----------------------------------------------------------------------------------

FTP Protocol

is implemented by both the client and server

essentially clients accessing folders in remote servers

Uses two parallel TCP connections to transfer a file:

Control connection -> sending control info betw' the two hosts (client and server)
-> user info, password, commands to change remote directory

Data connection -> used to send files

-----------------------------------------------------------------------------------

Client initiates a control connection on port 21
   - Client sends the user identifi', password, as well as commands over this control connection during the entire FTP session.
   
When the server side receives a command for a file transfer, it initiates a TCP data connection at port 20

FTP sends exactly one file over the data connection after which the data connection will be cloed.
(Non-Persistent)

Commands -> from client to server
Replies -> from server to client

in 7-bit ASCII format.

each command consts of four uppercase ASCII characters.

Replies are three digit number.

331 : username okay

-----------------------------------------------------------------------------------

Emal in the Internet
Three major components
   - User agents
   - Mail servers
   - Simple Mail Transfer (SMTP)
   
SMTP is at the heart of Internel email; it transfers messages from the senders' mail srvers to the reciouents' mail servers

older than HTTP

e.g.
Alice composes a message with Bob's email address
-> Alice'user agent sends the message to her mail server
-> The client side of SMTP on Alice's mail server opens a direct persistent TCP connection to an SMTP server at port 25 on 
Bob's mail server
-> The client sends Alice's message over the TCP connection
-> SMTP receives the message and places it in Bob's mailbox.

-----------------------------------------------------------------------------------

Comparison Between SMTP and HTTP
Similar Points:
Both of SMTP and HTTP are used to transfer files from one host to another.

HTTP transfers files (objects) from a Web server to a Web client (browser)
SMTP transfers files (email messages) from one mail server to another mail server

Both persistent HTTP and SMTP use persistent TCP connections to transfer files.


Difference between SMTP and HTTP
Diff 1
1, HTTP is mainly a pull protocol
- someone loads info on a Web server and users use HTTP to pull the info from the server.
- The TCP connection is initiated by the machine that wants to receive the file.

2, SMTP is primarily a push protocol
- The sender mail server pushes the file to the recipient mail server.
- The TCP connection is initiated by the machine that wants to send the file.

Diff 2
1, SMTP requires each message, including the body of each message to be in 7-bit ASCII format.
- If the message contains non 7-bit ASCII or binary data, then the message has to be encoded into 7-bit ASCII.

2, HTTP data does not impose this restriction

Diff 3
1, HTTP encapsulates each object in its own HTTP response message. 
2, SMTP places all of the message's objects into one message.

(puts all vs each)

-----------------------------------------------------------------------------------

To obtain messages from the mail server, need to use mail access protocols
- Post Office Protocol - Version 3 (POP3)
- Internet Mail Access Protocol (IMAP)
- HTTP

Domain Name System (DNS)
A host can be identified in two ways:
- By a hostname:
   - www.google.com.au
   - mnemonic for human being
   - difficult to process for routers
   
- By an IP address:
   - 121.7.106.83
   - fixed-length: four bytes, 0-255 in each field
   - has a rigid hierarchical structure
   
For a client connecting to a server, the client has to know the IP address of the server
rather than just the server's hostname.

DNS is the application-layer protocol to translate user-supplied hostnames to IP addresses.
- The DNS adds an additional delay - sometimes substantial - to the internet applications that use it.

Sent within UDP to port 53 

Why not DNS but UDP?
- Need to handle a large number of requests
- use UDP to minimise system overheads

host aliasing
- host can have one or more alias names.
- relay1.west-coast.enterprise.com -> two aliases
- enterprise.com and www.enterprise.com

Mail server aliasing
- the hostname of the mail server is more complicated than what we seem to have.
- bob@hotmail.com vs bob@relay1.west-coast.hotmail.com

Load Distribution
- Perform load distribution among replicated servers.

-----------------------------------------------------------------------------------

Maintain a single DNS server that contains all the hostname-IP mappings.
The cleints direct all queries o the single DNS server, and the DNS server responds diretly to the querying clients

In the centralised design, 
   - single point of failure
   - traffic volume
   - distant centralised database (too far)
   - maintenance

Cannot maintain with a single server.

So it's distributed, hierarchcal database of mappings.

Hierarchically distributed around the world

Root DNS servers: only 13 root DNS servers in the world.
Network of replicated servers.

Hundle different domains.

Althoritative DNS servers:
   -Every organisation with publicly accessible hosts on the internet must provide publicly
   accessible  DNS records that map the names of those hosts to IP addresses.
   - An org's authoritative DNS server houses DNS records.
   
  Local DNS servers:
  -> doesn't belong to the hierarchy
  -> uni, company, residential ISP, default name server
  -> the local server sends queries to the hierarchy.

-----------------------------------------------------------------------------------

Version Control Systems -> records changes to a file over time so that can recall specific versions later.

Centralised VCS:
A single server contains all the versioned files.
   - CVS
   - SVN
   - Perforce
   
Distributed VCS
Each user has the entire history
   -Git
   -Bazaar
   -Mercurial
   
Any user can use their data to recover the server even when the server is down.

Git vs other VCS
   - others use delta-based version
   - Git uses a series of snapshots (do not need to reverse to get previous versions)

Uses checksums
   - hash code to keep track of files in Git.
   
   
DNS:
DNS roots -> top level domains -> authoritative
Send requests to the local ones then roots

Git:
Working directory: load one of the versions from the repository
Staging area: add changes, stage files, snapshot, commit changes to the database

Branching:
Enable development of different parts
Max 1000 branches

-----------------------------------------------------------------------------------

Application-Layer Services

image in the application-layer: encapsulated header and image
Web browser -> facebook server

Transport layer (browser) -> through socket -> transport layer (server)

Transport layer -> logical communication between application processes running on different
hosts.

Packet is called segment.

Transport layer passes the segment to network layer (browser): datagram

and network layer communicates the server side of network layer

Subtle but important distinction
- Transport layer protocol provides logical communication between processes running on different hosts.
- Network layer protocol provides logical communication between hosts

E.g
House in Melb, House in Syd
Each with 3 children

Managed by two mothers

Ann and Annie
letter with a separate envelope every week each child

House A <-> Ann <-> postal service <-> Annie <-> House B

Application messages: letters in envelopes
Processes = Children
Hosts (end system) = Houses
Transport Layer protocol = Ann and Annie (only do the job within their houses)
Network layer protocol = postal service (including mail carriers)

-----------------------------------------------------------------------------------

Internet's network layer provides a protocol called Internet Protocol (IP)

IP provides logical communication between hosts.
IP is an unreliable service
   - Doesn't guarantee segment delivery.
   - .. orderly delivery of segments.
   - .. integrity of the data in the segment
   
Each host has a unique IP address.

Transport layer -> process to process, while IP only provides a host-to-host delivery service.

-> to extend the host to host, to, process to process, need multiplexing and demultiplexing

Transport layer in the receiving host does not actually deliver data directly to a process
but instead to an intermediary socket.

Sockets are the doors for application processes to receive and send data (messages)

Each socket has a unique identifier.
The format of the identifier depends on what transport layer protocol is used. (UDP or TCP)

Each transport layer segment has a set of fields identifying the sockets

Demultiplexing: at the receiving end, the transport layer examines the fields in the segment to 
identify the receiving socket and then directs the segment to that socket

Multiplexing: Gather data chunks at the soure host from different sockets
Encapsulate each data chunk with header info (will be used in demultiplexing later) to 
create segments.

Pass the segments to the network layer

-----------------------------------------------------------------------------------

User Datagram Protocol (UDP)
UDP:
   It is no frills and bare-bone
   It does as little as transport layer can do:
       multiplexing and demultiplexing
         - In UDP, sockets are identified by port numbers.
         - Some light error checking.
         
Except for the above two jobs, it adds nothing to IP.
UDP is connectionless and unreliable:
      -no guarantees on delivery, order, and integrity, inheriting from IP

browser (msg) -> socket -> transport layer (small chunks) -> UDP segments network layer
-> logical communication -> network layer -> same process then transport layer -> socket -> facebook server.



-----------------------------------------------------------------------------------


-----------------------------------------------------------------------------------

